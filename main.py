import time
import random
import threading
import queue
import curses
from datetime import datetime
import paho.mqtt.client as mqtt

# MQTT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BROKER = "ip"
PORT = 1883
USERNAME = "<user login>_<device code>"
PASSWORD = "<device code>"
BASE = "users/<user id>/devices/<device code>"
TOPICS = {
    'temp': f"{BASE}/temp",
    'hum': f"{BASE}/hum",
    'air_hum': f"{BASE}/air_hum",
    'light': f"{BASE}/light"
}

# –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
send_queue = queue.Queue()
recv_queue = queue.Queue()

def ui_thread(stdscr):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    curses.curs_set(0)
    h, w = stdscr.getmaxyx()
    mid = w // 2

    sent_win = curses.newwin(h - 2, mid, 2, 0)
    recv_win = curses.newwin(h - 2, w - mid, 2, mid)

    recv_status = "‚¨ú"
    stdscr.addstr(0, 0, "Sent".center(mid), curses.A_REVERSE)
    stdscr.hline(1, 0, curses.ACS_HLINE, w)

    sent_lines = []
    recv_lines = []

    while True:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            topic, payload = send_queue.get_nowait()
            ts = datetime.now().strftime("%H:%M:%S")
            sent_lines.append(f"{ts} -> {topic}: {payload}")
            if len(sent_lines) > h - 3:
                sent_lines.pop(0)
        except queue.Empty:
            pass

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            topic, payload = recv_queue.get_nowait()
            ts = datetime.now().strftime("%H:%M:%S")
            recv_lines.append(f"{ts} <- {topic}: {payload}")
            if len(recv_lines) > h - 3:
                recv_lines.pop(0)

            if payload.upper() == "ON":
                recv_status = "üü©"
            elif payload.upper() == "OFF":
                recv_status = "üü•"
        except queue.Empty:
            pass

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        recv_header = f"Received {recv_status}"
        stdscr.addstr(0, mid, recv_header.ljust(w - mid), curses.A_REVERSE)

        sent_win.erase()
        for i, line in enumerate(sent_lines):
            sent_win.addstr(i, 0, line[:mid - 1])
        sent_win.noutrefresh()

        recv_win.erase()
        for i, line in enumerate(recv_lines):
            recv_win.addstr(i, 0, line[:w - mid - 1])
        recv_win.noutrefresh()

        stdscr.refresh()
        curses.doupdate()
        time.sleep(0.1)

def on_connect(client, userdata, flags, rc):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏."""
    client.subscribe(TOPICS['light'])

def on_message(client, userdata, msg):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö MQTT-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    recv_queue.put((msg.topic, msg.payload.decode()))

def mqtt_thread():
    """–≠–º—É–ª—è—Ç–æ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ MQTT."""
    client = mqtt.Client(protocol=mqtt.MQTTv311)
    client.username_pw_set(USERNAME, PASSWORD)
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(BROKER, PORT, 60)
    client.loop_start()

    try:
        while True:
            temp = round(random.uniform(20, 25), 2)
            hum = round(random.uniform(30, 60), 2)
            air = round(random.uniform(40, 80), 2)

            client.publish(TOPICS['temp'], temp)
            send_queue.put((TOPICS['temp'], temp))
            time.sleep(0.1)

            client.publish(TOPICS['hum'], hum)
            send_queue.put((TOPICS['hum'], hum))
            time.sleep(0.1)

            client.publish(TOPICS['air_hum'], air)
            send_queue.put((TOPICS['air_hum'], air))
            time.sleep(30)
    finally:
        client.loop_stop()
        client.disconnect()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ MQTT –∏ curses-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    t = threading.Thread(target=mqtt_thread, daemon=True)
    t.start()
    curses.wrapper(ui_thread)

if __name__ == "__main__":
    main()